"""Integration tests.

By-and-large this is simply a set of large-ish integerations of various types
which are checked only for non-crashing behaviour.
"""

import cdata

def test_compound():
    # Struct approximates the data structure of an early version of the
    # rig-based SpiNNaker network_tester application.
    traffic_node_type_t = cdata.Typedef("traffic_node_type_t",
                                        cdata.Enum(("TN_BERNOULLI", None),
                                                   ("TN_RELAY", None)),
                                        doc="Available types of traffic "
                                            "generator.")
    
    bool = cdata.Typedef("bool", cdata._Bool, native=True)
    
    traffic_node_source_t = \
        cdata.Typedef("traffic_node_source_t",
                      cdata.Struct(("key", cdata.unsigned_int,
                                    "The routing key to use for traffic "
                                    "generated by this node with sequence "
                                    "number bits set to zero."),
                                   ("num_received", cdata.unsigned_int,
                                    "Number of packets received without a "
                                    "payload."),
                                   ("num_out_of_order", cdata.unsigned_int,
                                    "Of the above counts, how many packets "
                                    "arrived out of order."),
                                   ("last_seq_num", cdata.unsigned_int,
                                    "The last sequence number of an arriving "
                                    "packet. Used to count the number of "
                                    "out-of-order requests.")),
                      doc="Information logged about the recipt of packets.")
    
    traffic_node_spec_t = \
        cdata.Typedef("traffic_node_spec_t",
                      cdata.Struct(("type", traffic_node_type_t,
                                    "The type of traffic to generate."),
                                   ("key", cdata.unsigned_int,
                                    "The routing key to use for traffic "
                                    "generated by this node with sequence "
                                    "number bits set to zero."),
                                   ("payload", bool,
                                    "Should generated packets include a "
                                    "payload."),
                                   ("num_sent", cdata.unsigned_int,
                                    "Number of packets sent in total."),
                                   ("num_sources", cdata.unsigned_int,
                                    "Number of different sources of packets to "
                                    "be sunk by this trafic node."),
                                   ("sources",
                                    cdata.Pointer(traffic_node_source_t),
                                    "An array of num_sources, sorted in "
                                    "ascending key order, where recieved "
                                    "packet information is logged."),
                                   ("data",
                                    cdata.Union(
                                        ("bernoulli", cdata.Struct(
                                             ("probability", cdata.double,
                                              "Probability of a packet being "
                                              "sent each period. 0.0 - 1.0."),
                                             ("period", cdata.unsigned_int,
                                              "Number of microseconds between "
                                              "iterations of the traffic "
                                              "generator.")),
                                         "When type=TN_BERNOULLI, this "
                                         "contains the parameters to a "
                                         "Bernoulli traffic model."),
                                        ("relay", cdata.Struct(),
                                         "When type=TN_RELAY, this "
                                         "contains the parameters to a "
                                         "Relay traffic model.")),
                                    "The data associated with each type of "
                                    "traffic node.")),
                      doc="Information globally applicable to a traffic node "
                          "(i.e. traffic generator/consumers).")
    
    network_node_spec_t = \
        cdata.Typedef("network_node_spec_t",
                      cdata.Struct(("key_seq_mask", cdata.unsigned_int,
                                    "A mask for bits of routing keys which "
                                    "hold the packet sequence number (must "
                                    "be a contiguous block from bit 0 "
                                    "onwards)."),
                                   ("duration", cdata.unsigned_int,
                                    "Number of microseconds to run the "
                                    "experiment for."),
                                   ("num_traffic_nodes", cdata.unsigned_int,
                                    "The number of traffic nodes this "
                                    "network node implements."),
                                   ("traffic_nodes",
                                    cdata.Pointer(cdata.Pointer(traffic_node_spec_t)),
                                    "An array of pointers to "
                                    "num_traffic_nodes traffic node "
                                    "descriptions.")),
                      doc="Information globally applicable to a network node "
                          "(i.e. core).")
    
    # Header generation should work
    print(cdata.to_header(network_node_spec_t, doc="This is going to be great!"))
    
    # An example (partial) initialisation of the data structure.
    tns = cdata.Array(cdata.Pointer(traffic_node_spec_t), 8)()
    for tn_p in tns:
        tn_sources = cdata.Array(traffic_node_source_t, 2)()
        for source in tn_sources:
            source.key = cdata.unsigned_int(0x1234)
        
        tn = traffic_node_spec_t(type=traffic_node_type_t("TN_BERNOULLI"),
                                 num_sources=cdata.unsigned_int(2),
                                 sources=cdata.pointer(tn_sources[0]))
        tn_p.deref = tn
    nn = network_node_spec_t(num_traffic_nodes=cdata.unsigned_int(8),
                             traffic_nodes=cdata.pointer(tns[0]))
    
    # Check iteration finds everything. (nn + tns + *tns + tn_sources)
    assert len(list(nn.iter_instances())) == (1 + 1 + 8 + 8)
    
    # Check the size is correct
    size = cdata.total_size(nn)
    assert size == ((4 * 4) +  # nn
                    (4 * 8) +  # tns
                    ((6 * 4 + 1 + 8) * 8) +  # *tns
                    ((4 * 4) * 2 * 8))  # tn_sources
    
    # Check the allocation size matches
    assert cdata.alloc(nn, 0x1000) == 0x1000 + size
